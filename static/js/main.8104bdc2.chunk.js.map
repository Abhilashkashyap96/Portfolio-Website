{"version":3,"sources":["components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","components/Images/Logo.png","App.js","reportWebVitals.js","index.js"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","url","fetchData","country","a","changableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","initialDailyData","fetchAPI","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","App","fetchedData","setState","state","this","src","Logo","alt","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8104bdc2.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\nimport CountUp from 'react-countup'\n\nimport './Cards.css'\nfunction Cards({ data: { confirmed, recovered, deaths, lastUpdate } }) {\n    if(!confirmed){\n        return 'Loading...'\n    }\n    return (\n        <div className='containerCard'>\n        <Grid container spacing={3} justify='center'>\n            <Grid item component={Card} xs={12} md={3} className='card infected'>\n                <CardContent>\n                    <Typography color='textSecondary' gutterBottom>Infected</Typography>\n                    <Typography variant='h5'>\n                        <CountUp  start={0} end= {confirmed.value} duration={2.5} seperator=\",\" />\n                    </Typography>\n                    <Typography color='textSecondary'>{ new Date(lastUpdate).toDateString() })</Typography>\n                    <Typography variant='body2'>Number of active cases of COVID-19</Typography>\n                </CardContent>\n            </Grid>\n            <Grid item component={Card} xs={12} md={3} className='card recovered'>\n                <CardContent>\n                    <Typography color='textSecondary' gutterBottom>Recovered</Typography>\n                    <Typography variant='h5'>\n                        <CountUp  start={0} end= {recovered.value} duration={2.5} seperator=\",\" />\n                    </Typography>\n                    <Typography color='textSecondary'>{ new Date(lastUpdate).toDateString() })</Typography>\n                    <Typography variant='body2'>Number of recoveries from COVID-19</Typography>\n                </CardContent>            \n            </Grid>\n            <Grid item component={Card} xs={12} md={3} className='card deaths'>\n                <CardContent>\n                    <Typography color='textSecondary' gutterBottom>Deaths</Typography>\n                    <Typography variant='h5'>\n                        <CountUp  start={0} end= {deaths.value} duration={2.5} seperator=\",\" />\n                    </Typography>\n                    <Typography color='textSecondary'>{ new Date(lastUpdate).toDateString() })</Typography>\n                    <Typography variant='body2'>Number of deaths cases caused by COVID-19</Typography>\n                </CardContent>           \n            </Grid>\n        </Grid>\n        </div>\n    )\n}\n\nexport default Cards\n","import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changableUrl = url;\n\n    if(country) {\n        changableUrl = `${url}/countries/${country}`\n    }\n\n    try{\n        const {data : {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changableUrl);\n\n        return { confirmed,recovered,deaths,lastUpdate }\n    }catch (error) {\n        console.log(error)\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`)\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            recovered: dailyData.recovered.total,\n            date: dailyData.reportDate,\n        }));\n        return modifiedData\n    }catch (error){\n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const {data: { countries }} = await axios.get(`${url}/countries`);\n\n        return countries.map((country) => country.name)\n    }catch (error) {\n        console.log(error);\n    }\n}","import React, { useState, useEffect } from 'react'\nimport { fetchDailyData } from '../../api'\nimport { Line, Bar } from 'react-chartjs-2'\n\nimport './Chart.css'\n\n\nfunction Chart({data, country}) {\n    const [ dailyData, setDailyData ] = useState ([]);\n\n    useEffect(() =>{\n        const fetchAPI = async () =>{\n            const initialDailyData = await fetchDailyData()\n            setDailyData(initialDailyData);\n        };\n        fetchAPI();\n    }, []);\n\n\n    const lineChart = (\n        dailyData.length\n            ? (\n                <Line \n                    data={{\n                        labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n                        datasets: [{\n                            data : dailyData.map((data) => data.confirmed),\n                            label : 'Infected',\n                            borderColor: '#3333ff',\n                            fill: true\n                        }, \n                        {\n                            data: dailyData.map((data) => data.recovered),\n                            label: 'Recovered',\n                            borderColor: 'green',\n                            backgroundColor: 'rgba(0, 255, 0, 0.5)',\n                            fill: true,\n                          },{\n                            data : dailyData.map((data) => data.deaths),\n                            label : 'Deaths',\n                            borderColor: 'red',\n                            backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                            fill: true\n                        },\n                        ],\n                    }}\n                />) : null\n    );\n\n    const barChart = (\n        data.confirmed\n        ?(\n            <Bar \n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(0, 0, 255, 0.5)',\n                            'rgba(0, 255, 0, 0.5)',\n                            'rgba(255, 0, 0, 0.5)'\n                        ],\n                        data:[data.confirmed.value, data.recovered.value, data.deaths.value]\n                    }]\n                }}\n                options={{\n                    legend: {display: false},\n                    title: {display: true, text: `Current state in ${country}`},\n                }}\n            />\n        ) :null\n    )\n\n    return (\n        <div className='containerChart'>\n            { country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart\n","import React, { useState, useEffect } from 'react'\nimport { NativeSelect, FormControl } from '@material-ui/core'\n\nimport './CountryPicker.css'\n\nimport { fetchCountries } from '../../api'\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [ fetchedCountries, setFetchedCountries ] = useState ([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries())\n        }\n\n        fetchAPI();\n    }, [setFetchedCountries])\n    return (\n        <FormControl className='formControl'>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange (e.target.value)}>\n                <option value=''>Global</option>\n                {fetchedCountries.map((country , i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker\n","export default __webpack_public_path__ + \"static/media/Logo.9e5d4fc7.png\";","import React, { Component } from 'react'\nimport Cards from './components/Cards/Cards'\nimport Chart from './components/Chart/Chart'\nimport CountryPicker from './components/CountryPicker/CountryPicker'\nimport { fetchData } from './api'\nimport Logo from '../src/components/Images/Logo.png'\nimport './App.css'\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      data: {},\n      country: '',\n    }\n  }\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country })\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='logo'>\n          <img src={ Logo } alt=\"Logo\" />\n          <h1>Tracker</h1>\n        </div>  \n        <br />\n        <br />\n        <Cards data={ this.state.data }/>\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={this.state.data} country={this.state.country}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}